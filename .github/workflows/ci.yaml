# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build with Gradle

    runs-on: ubuntu-latest

    outputs:
      app-version: ${{ steps.get-app-version.outputs.app-version }}
      commit-short-sha: ${{ steps.get-app-version.outputs.commit-short-sha }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build and analyze
        id: build-and-analyse
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonarqube --info

      - name: Build zip
        id: build-zip
        run: ./gradlew buildZip --info

      - name: Store app artifact
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v2
        with:
          name: app-zip-file
          path: build/distributions/data-masker-*.zip

      - name: Get app version
        id: get-app-version
        run: |
            cd build/distributions
            version="$(ls | awk -F".zip" '{print $1}' | awk -F"-" '{print $NF}')"
            echo "::set-output name=app-version::$version"
            echo "::set-output name=commit-short-sha::$(git rev-parse --short HEAD)"


  deploy:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: build

    steps:
      - name: Display AWS CLI version
        run: aws --version
      - name: Add config file
        run: |
          cd ~ && mkdir .aws && cd .aws
          echo "[default]" >> config
          echo "region=us-east-1" >> config
      - name: Add credentials file
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          cd ~ && mkdir -p .aws && cd .aws
          echo "[default]" >> credentials
          echo "aws_access_key_id=$AWS_ACCESS_KEY" >> credentials
          echo "aws_secret_access_key=$AWS_SECRET_KEY" >> credentials
      - name: Display AWS CLI confgiuration
        run: aws configure list

      - name: Download app artifact
        uses: actions/download-artifact@v2
        with:
          name: app-zip-file

      - name: Upload app artifact to S3 bucket
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          APP_VERSION: ${{ needs.build.outputs.app-version }}
          COMMIT_HASH: ${{ needs.build.outputs.commit-short-sha }}
        run: |
          aws s3 cp data-masker-*.zip s3://$AWS_S3_BUCKET/data-masker-$APP_VERSION-$COMMIT_HASH.zip

      - name: Update Lambda function code
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          APP_VERSION: ${{ needs.build.outputs.app-version }}
          COMMIT_HASH: ${{ needs.build.outputs.commit-short-sha }}
        run: |
          aws lambda update-function-code \
              --function-name my-java-function \
              --s3-bucket $AWS_S3_BUCKET \
              --s3-key data-masker-$APP_VERSION-$COMMIT_HASH.zip

      - name: Wait until function updated
        run: |
          aws lambda wait function-updated \
              --function-name my-java-function

      - name: Get Lambda function info
        run: |
          aws lambda get-function \
              --function-name my-java-function
