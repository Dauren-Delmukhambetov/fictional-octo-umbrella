
## This is reusable workflow to deploy app to the environment

name: Deployment

on:
  workflow_call:

    inputs:
      stack-suffix:
        required: true
        type: string
      stage-name:
        required: true
        type: string
      aws-region:
        required: true
        type: string

    secrets:
      aws-access-key:
        required: true
      aws-secret-key:
        required: true
      aws-s3-bucket:
        required: true


jobs:
  deploy:
    name: Deploy serverless app to AWS
    runs-on: ubuntu-latest

    steps:
      # Configuring AWS CLI
      - name: Display AWS CLI version
        run: aws --version
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key }}
          aws-secret-access-key: ${{ secrets.aws-secret-key }}
          aws-region: ${{ inputs.aws-region }}

      # Packaging the app
      - name: Check out the current branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Build zip
        id: build-zip
        run: ./gradlew buildZip --info
      - name: Get app version
        id: get-app-version
        run: |
          cd build/distributions
          version="$(ls | awk -F".zip" '{print $1}' | awk -F"-" '{print $NF}')"
          echo "APP_VERSION=$version" >> $GITHUB_ENV

      # Deploying the app to AWS
      - name: Package serverless app
        run: |
          aws cloudformation package \
              --template-file sam-template.yml \
              --s3-bucket ${{ secrets.aws-s3-bucket }} \
              --s3-prefix $APP_VERSION \
              --output-template-file out.yml

      - name: Deploy serverless app
        run: |
          aws cloudformation deploy \
              --template-file out.yml \
              --stack-name data-masker-api${{ inputs.stack-suffix }} \
              --parameter-overrides Stage=${{ inputs.stage-name }} \
              --capabilities CAPABILITY_IAM

      - name: Save environment URL
        id: save-api-url
        run: |
          apiUrl="$(aws cloudformation describe-stacks \
              --stack-name data-masker-api${{ inputs.stack-suffix }} \
              --query "Stacks[].Outputs[?OutputKey=='ApiUrl'].OutputValue"  \
              --output text)"
          echo "api_url=$apiUrl" >> $GITHUB_OUTPUT
